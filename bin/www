#!/usr/bin/env node

var iaCoreName = require('../package.json').name;
var iaCoreVersion = require('../package.json').version;

console.info('\nStarting %s v%s\n', iaCoreName, iaCoreVersion);

require('../src/bootstrap')()
        .then(function (app) {

            var debug = require('debug')('IA:server');
            var http = require('http');
            /**
             * Get port from environment and store in Express.
             */
            var port = normalizePort(config_get('app.qwant-ia.server-port'));
            app.set('port', port);

            /**
             * Create HTTP server.
             */

            var server = http.createServer(app);

            /**
             * Listen on provided port, on all network interfaces.
             */

            server.listen(port);
            server.on('error', onError);
            server.on('listening', function () {
                onListening(server);
            });


            /**
             * Normalize a port into a number, string, or false.
             */

            function normalizePort(val) {
                var port = parseInt(val, 10);

                if (isNaN(port)) {
                    // named pipe
                    return val;
                }

                if (port >= 0) {
                    // port number
                    return port;
                }

                return false;
            }

            /**
             * Event listener for HTTP server "error" event.
             */

            function onError(error) {
                if (error.syscall !== 'listen') {
                    throw error;
                }

                var bind = typeof port === 'string'
                        ? 'Pipe ' + port
                        : 'Port ' + port;

                // handle specific listen errors with friendly messages
                switch (error.code) {
                    case 'EACCES':
                        console.error(bind + ' requires elevated privileges');
                        process.exit(1);
                        break;
                    case 'EADDRINUSE':
                        console.error(bind + ' is already in use');
                        process.exit(1);
                        break;
                    default:
                        throw error;
                }
            }

            /**
             * Event listener for HTTP server "listening" event.
             */

            function onListening(server) {
                var addr = server.address();
                var bind = typeof addr === 'string'
                        ? 'pipe ' + addr
                        : 'port ' + addr.port;
                console.log('\nServer listening on : ' + addr.port + ' (http://localhost:' + addr.port + ')');
            }

        });
